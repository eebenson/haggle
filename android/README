Haggle for Android
===========================

NOTE: Always check http://code.google.com/p/haggle/w/list for the
latest information on building for Android.

Haggle can be built for Google's Android OS (e.g., the Nexus One) and
run as an Android Service. This allows Haggle to run on non-rooted
devices, but it restricts its use to WiFi in managed mode. WiFi ad-hoc
mode cannot currently be set in Android without first rooting the
device. Similarly, Bluetooth cannot be accessed from native code
without access privileges outside of what Android provides to
applications (see note below how to enable Bluetooth on rooted
devices).

Writing Haggle Applications
---------------------------

Haggle applications are developed as any other Android applications
(see the Android tutorials for that). However, to be able to interact
with Haggle from your application, you also have to include the
org.haggle.jar class library in your Android application project
(e.g., in Eclipse). The Haggle class library allows your application
to interact with Haggle using a Java API. Unless the native Haggle
application libraries have been installed on your device, they also
need to be bundled with your application.

One example application, called "PhotoShare", should be bundled with
this source package in the 'android' directory. PhotoShare is an
Android Eclipse project. Once it is opened in Eclipse, it is probably
necessary to configure local paths to org.haggle.jar, the Android SDK,
etc.

Building
--------

Prerequisites: 

* Android NDK version r5 or greater
* Android SDK
* Eclipse with Android development plugin
* Java

Steps (all paths relative top directory):

1. First build the external library dependencies:
   $ cd android/extlibs
   $ ./build.sh

2. Build native Haggle code:
   $ cd android/Haggle
   $ <path_to_NDK>/ndk-build

3. Build native application code (e.g.):
   $ cd android/PhotoShare
   $ <path_to_NDK>/ndk-build

Repeat step 3 for all Android applications that require native code to
be built (e.g., LuckyMe).

4. Build Haggle's Java component (in Eclipse)
   - Start Eclipse
   - Import the directory 'android/Haggle' as an Android project.
   - Build (should be automatic)

5. Build Haggle applications (in Eclipse)
   - Import application code in Eclipse as an Android project 
     (e.g., android/PhotoShare)
   - Build org.haggle.jar (should be enough to just run 
     "./configure && make" in the top dir)
   - Copy src/libhaggle/jni/org.haggle.jar to android/<MyApp>/libs
   - Add src/libhaggle/jni/org.haggle.jar as a referenced library:
     Eclipse->Project->Properties->Java Build Path->Libraries->Add External Jar

Repeat step 5 for all other applications.


Enabling Bluetooth on rooted Android devices
--------------------------------------------

Haggle can use bluetooth on rooted devices by modifying the privileges
given to Android applications with the BLUETOOTH_ADMIN
permission. This can be done relatively easily by modifying the
/system/etc/permissions/platform.xml file on a device. Change the
following section:

<permission name="android.permission.BLUETOOTH_ADMIN" >
        <group gid="net_bt_admin" />
</permission>

to

<permission name="android.permission.BLUETOOTH_ADMIN" >
        <group gid="net_bt_admin" />
        <group gid="bluetooth" />
</permission>		  

This change allows Haggle to detect the device's local bluetooth
hardware.

Setting Ad hoc mode
-------------------

NOTE: This applies to phones with the TI wlan wireless chip (e.g., G1,
Magic, Hero). The Nexus One uses the Linux wireless extensions and
require the wireless tools to set ad hoc mode. These tools have to be
compiled separately.

At the time of writing of this document, Android has no GUI for
setting ad hoc mode on the WiFi interface. However, ad hoc mode can be
manually set through the shell by modifying the file
/system/etc/wifi/tiwlan.ini with the following settings.

WiFiAdhoc = 1
dot11DesiredSSID = HTCG1Default
dot11DesiredBSSType = 0 

The driver module has to be reloaded into the kernel using this new
configuration.

Alternatively, use the script 'adhoc.sh'. Install the script on the
device and run it as 'root', e.g.:

# ./adhoc.sh start [ #nodeNR ]

The WiFi interface should be turned off in the Android GUI before this
script is run.

Note about a bug with static initializers in Bionic
---------------------------------------------------

As of Android platform release 1.5r2 (and probably earlier) there is a
confirmed bug in Bionic which causes the constructor of static objects
to be run twice.

See the following discussion thread for more information:

http://groups.google.com/group/android-platform/browse_thread/thread/1a434b326cef6609

To deal with this problem, some class constructors, of which there
exist statically allocated objects, have extra checks to make sure the
constructor can handle two calls without bad consequences.  In some
other constructors, no fixes have been applied, because the problem is
not critical. For example, statically allocated strings will probably
leak memory because the string constructor is run twice, thus
allocating the string memory twice as well. But this is something one
can live with until a fix is applied in Bionic upstream.
