/* Haggle testbed
 * Uppsala University
 *
 * Haggle internal release
 *
 * Copyright Haggle
 */

package vendetta.monitored_network.haggle;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.vecmath.Point3f;

import vendetta.Vendetta;
import vendetta.MonitorNode;
import vendetta.visualization.canvases.HaggleCanvas;
import vendetta.util.log.Log;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import org.xml.sax.InputSource;
import java.io.StringReader;
import java.io.*;
import java.net.*;
import javax.xml.transform.*;
import javax.xml.transform.stream.*;
import java.util.*;

/**
 * A helper class to handle log events.
 * 
 * This class provides methods to parse and maybe visualize log events
 * that were created by a node client. The methods are dependent on
 * the actual log messages and thus depend on the application running
 * on the sensor nodes.
 *
 * @author Frederik Hermans (hermans@inf.fu-berlin.de)
 */
public class HaggleLogHandler {
	private static Log LOG = Log.getInstance("HaggleLogHandler");
	/**
	 * The WISENET floor canvas where we do our visualization magic.
	 */
	private HaggleCanvas haggleCanvas;
	
	/**
	 * The WISENET overlay object.
	 */
	private Haggle parent;
	
	public HaggleLogHandler(Haggle parent) {
		this.parent = parent;
	}
	
	public Haggle getParent() 
	{
		return parent;
	}
	
	/**
	 * Handle a log event generated by a node client.
	 * 
	 * @param msg The log message.
	 * @return true on successful parsing, false otherwise.
	 */
	public boolean parseLogEvent(String msg) {
		String[] split = msg.split("\\s");
		
		if (split.length < 3)
			return false;
		
		//LOG.debug(msg);
		if(haggleCanvas != null)
			haggleCanvas.handleEvent(msg);
		
		SensorNode	evtNode = parent.getNodeByName(split[3]);
		if(evtNode != null)
		{
			evtNode.handleEvent(msg);
		}
		return true;
	}
	
	public void redraw()
	{
		int i;
		for(i = 0; i < Vendetta.getMonitorNodeCount(); i++)
		{
			MonitorNode node = Vendetta.getMonitorNode(i);
			if(node != null)
			{
				((SensorNode) node).advanceAnimation();
			}
		}
		getHaggleCanvas().repaint(10);
	}
	
	public SensorNode getSensorNode(int i)
	{
		return ((SensorNode) Vendetta.getMonitorNode(i));
	}
	
	public SensorNode getSensorNodeById(int id)
	{
		int i;
		for(i = 0; i < Vendetta.getMonitorNodeCount(); i++)
		{
			SensorNode s = getSensorNode(i);
			if(s != null)
				if(s.getID() == id)
					return s;
		}
		return null;
	}
	
	public SensorNode getSensorNode(String name)
	{
		int i;
		for(i = 0; i < Vendetta.getMonitorNodeCount(); i++)
		{
			SensorNode s = getSensorNode(i);
			if(s != null)
				if(s.getNodeName() == name)
					return s;
		}
		return null;
	}
	
	/**
	 * Get the floor canvas we're doing our magic on.
	 * 
	 * @return The floor canvas.
	 */
	private HaggleCanvas getHaggleCanvas() {
		if(haggleCanvas != null)
			return haggleCanvas;
		
		haggleCanvas = (HaggleCanvas) Vendetta.getGUI().getCanvas(0);
		haggleCanvas.setLogHandler(this);
		return haggleCanvas;
	}
}
