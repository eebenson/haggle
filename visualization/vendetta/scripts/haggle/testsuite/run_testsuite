#!/bin/bash

# Go to the locaiton of this script. It has to be executed there.
cd $(dirname $0)
HERE=$(pwd)

usage() {
	echo $0" [--run-with-controller <controller address>] [--run-from-old-set <path>] [--postfix <string>]"
	echo
	echo "--help                      Displays this help information."
	echo "--run-with-controller       "
	echo "<controller address>        "
	echo "--run-from-old-set          "
	echo "<path>                      "
	echo "--postfix                   "
	echo "<string>                    "
	exit 1
}

CONTROLLER_IP=
OLD_SET=
POSTFIX=
next_is_controller_ip=0
next_is_old_set=0
next_is_postfix=0
for i in $@; do
	if [ $next_is_controller_ip -eq 1 ]; then
		CONTROLLER_IP="--run-with-controller $i"
		next_is_controller_ip=0
	elif [ $next_is_old_set -eq 1 ]; then
		OLD_SET=$i
		next_is_old_set=0
	elif [ $next_is_postfix -eq 1 ]; then
		POSTFIX=$i
		next_is_postfix=0
	else
		if [ "$i" == "--help" ]; then
			usage
		elif [ "$i" == "--run-with-controller" ] ; then
			next_is_controller_ip=1
		elif [ "$i" == "--run-from-old-set" ] ; then
			next_is_old_set=1
		elif [ "$i" == "--postfix" ] ; then
			next_is_postfix=1
		fi
	fi
done

FIXSCEN() {
	echo "UNABLE TO START TEST SUITE"
	echo
	echo "Please do this:"
	echo "sudo cp scenarioapp.sh /usr/local/haggle/bin/"
	echo
	exit 1
}

SCENARIOAPP=/usr/local/haggle/bin/scenarioapp.sh

if [[ -z "$CONTROLLER_IP" && -z "$OLD_SET" ]] ; then
	# Ensure that the scenarioapp.sh script has been installed and is the latest 
	# version:
	if [[ ! -e $SCENARIOAPP ]] ; then
		FIXSCEN
	fi
	
	if [[ $(diff -q scenarioapp.sh $SCENARIOAPP 2> /dev/null) ]] ; then
		FIXSCEN
	fi
fi

# Make sure pdflatex is installed:
if [[ ! -e $(which pdflatex) ]] ; then
	echo "UNABLE TO START TEST SUITE"
	echo
	echo "pdflatex needs to be installed to generate the report."
	echo
	exit 1
fi

# Make sure the results folder exists:
if [[ ! -e $HERE/results ]] ; then
	echo "UNABLE TO START TEST SUITE"
	echo
	echo "results directory missing."
	echo
	exit 1
fi

# Make sure there are no old/other .tar.gz files in this folder:
if [[ -e $HERE/test*.xml-*.tar.gz ]] ; then
	echo "UNABLE TO START TEST SUITE"
	echo
	echo "There can be no test*.xml-*.tar.gz files in this folder when this "
	echo "script runs."
	echo
	exit 1
fi

# Make sure there are no old/other .tar.gz files in the folder where they are 
# fetched from:
if [[ -e $HERE/../../../logs/test*.xml-*.tar.gz ]] ; then
	echo "UNABLE TO START TEST SUITE"
	echo
	echo "There can be no old test*.xml-*.tar.gz files in "$HERE/../../../logs/
	echo "when this script runs."
	echo
	exit 1
fi

# Make sure there is no file/folder called "testresult":
if [[ -e $HERE/testresult ]] ; then
	echo "UNABLE TO START TEST SUITE"
	echo
	echo "Please do this:"
	echo "rm -rf testresult"
	echo
	exit 1
fi

# Make sure there is no file/folder called "testresult":
if [[ -e $HERE/report ]] ; then
	echo "UNABLE TO START TEST SUITE"
	echo
	echo "Please do this:"
	echo "rm -rf report"
	echo
	exit 1
fi

# Put the results in its own folder inside the results folder:
RESULTS=results/$(date +"%s")$POSTFIX
mkdir $RESULTS

# Feedback:
echo "Starting test suite."
echo "Results will be placed in "$RESULTS

# Create report folder, to easily clean up afterwards:
mkdir report

# Write the start of the report document:
echo "\documentclass[12pt,a4paper]{article}" >> report/report.tex
echo "\usepackage{graphicx}" >> report/report.tex
echo "\title{Test suite report}" >> report/report.tex
echo "\author{Report script}" >> report/report.tex
echo "\begin{document}" >> report/report.tex
echo "\maketitle" >> report/report.tex
echo "\abstract{This report was generated by the test suite " >> report/report.tex
echo "checking script on \today" >> report/report.tex

# Include the repository revision if available:
if [[ -e .svn ]] ; then
	echo ". Repository revision " >> report/report.tex
	svn info | grep "Revision" | awk '{printf $2}' >> report/report.tex
fi
echo ".}" >> report/report.tex

# Run the tests one by one:
for i in test*.xml ; do
	# Get the test number/identifier:
	I=$(echo $i | awk '{sub("test","");sub(".xml","");print}')
	
	# Run test:
	echo "Running test "$I"..."
	if [[ -z $OLD_SET ]] ; then
		../run_scenario.sh --nofork $CONTROLLER_IP $HERE/$i
		# Move results here:
		mv $HERE/../../../logs/$i-*.tar.gz .
	else
		# Copy results here (not move, since we want to keep the old data):
		cp $OLD_SET/$i-*.tar.gz .
	fi
	
	# Check results:
	echo "Checking results of test "$I"..."
	# Check that there are some results:
	if [[ -e $(ls $i-*.tar.gz) ]] ; then
		# Unpack test results into its own folder, for easy cleanup:
		mkdir testresult
		cd testresult
		tar -xzf ../$i-*.tar.gz
		cd ..
		# Do the actual checking, and put the result into a .tex file:
		check.sh $I >> report/test$I.tex
		# Include that .tex file in the report:
		echo "\input{test"$I"}" >> report/report.tex
		
		# Clean up:
		rm -rf testresult
		# Move the results into the results folder:
		mv $i-*.tar.gz $RESULTS/
	else
		echo "WARNING: NO RESULTS FOR TEST "$I
	fi
done

# Write the end of the document:
echo "\end{document}" >> report/report.tex

# Feedback:
echo "Generating report document..."

# Generate report document:
cd report

pdflatex report.tex -halt-on-error > /dev/null
pdflatex report.tex -halt-on-error > /dev/null
pdflatex report.tex -halt-on-error > /dev/null

# Error checking:
if [[ -e report.pdf ]] ; then
	# Report was created, store in results folder:
	cp report.pdf ../$RESULTS/
	cd ..
	rm -rf report
else
	# Report was not created, don't delete report .tex document, so they can
	# be examined for errors:
	echo "ERROR: report document not properly generated."
	echo "Not deleting the temporary files, for debugging purposes."
fi

# Feedback:
echo "Test suite done"